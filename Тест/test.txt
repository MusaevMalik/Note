 Вопрос №5 

   Под наследованием понимается возможность создания нового класса на базе существующего.
 Наследование предполагает наличие отношения “является” между классом наследником и классом родителем.
 При этом класс потомок будет содержать те же атрибуты и методы, что и базовый класс, но при этом его можно (и нужно) расширять через добавление новых методов и атрибутов.
 Примером базового класса, демонстрирующего наследование, можно определить класс “автомобиль”, имеющий атрибуты: масса, мощность двигателя, объем топливного бака и методы: завести и заглушить.
 У такого класса может быть потомок – “грузовой автомобиль”, он будет содержать те же атрибуты и методы, что и класс “автомобиль”, и дополнительные свойства: количество осей, мощность компрессора и т.п..



 Вопрос №6

 Под инкапсуляцией понимается сокрытие деталей реализации, данных и т.п. от внешней стороны.
 Например, можно определить класс “холодильник”, который будет содержать следующие данные: производитель, объем, количество камер хранения, потребляемая мощность и т.п., и методы:
 открыть/закрыть холодильник, включить/выключить, но при этом реализация того,
 как происходит непосредственно включение и выключение пользователю вашего класса не доступна, что позволяет ее менять без опасения, что это может отразиться на использующей класс «холодильник» программе.
 При этом класс становится новым типом данных в рамках разрабатываемой программы. Можно создавать переменные этого нового типа, такие переменные называются объекты.

 Модификаторы доступа в Python используются для модификации области видимости переменных по умолчанию. 
 Есть три типа модификаторов доступов в Python ООП:

 №1 публичный — public;
 №2 приватный — private;
 №3 защищенный — protected.


 Вопрос №7

 Полиморфизм позволяет одинаково обращаться с объектами, имеющими однотипный интерфейс, независимо от внутренней реализации объекта. 
 Например, с объектом класса “грузовой автомобиль” можно производить те же операции, что и с объектом класса “автомобиль”, т.к. первый является наследником второго,
 при этом обратное утверждение неверно (во всяком случае не всегда). Другими словами полиморфизм предполагает разную реализацию методов с одинаковыми именами.
 Это очень полезно при наследовании, когда в классе наследнике можно переопределить методы класса родителя.


 Вопрос №8

 Абстра́кция  — в объектно-ориентированном программировании это придание объекту характеристик, которые отличают его от всех объектов, четко определяя его концептуальные границы.
  Основная идея состоит в том, чтобы отделить способ использования составных объектов данных от деталей их реализации в виде более простых объектов, подобно тому, 
 как функциональная абстракция разделяет способ использования функции и деталей её реализации в терминах более примитивных функций, таким образом,
 данные обрабатываются функцией высокого уровня с помощью вызова функций низкого уровня.


 Вопрос №9

 Наследование и композиция являются двумя основными понятиями в объектно-ориентированном программировании, которые моделируют отношения между двумя классами. 
 Они определяют дизайн приложения и определяют, как приложение должно развиваться по мере добавления новых функций или изменения требований.
 Оба они реализуют повторное использование кода, но делают это по-разному.

 Отличия :

 Наследование — это фундаментальное понятие ООП. В языке программирования могут быть объекты и сообщения, но без наследования он не будет объектно-ориентированным 
 (только основанным на объектах, но все еще полиморфным).

 Композиция — это тоже фундаментальное свойство, причем любого языка. Даже если язык не поддерживает композицию (что редкость в наши дни),
 люди все равно будут мыслить категориями частей и компонентов. Без композиции было бы невозможно решить сложные задачи по частям.
 (Инкапсуляция тоже вещь фундаментальная, но сейчас речь не о ней)



 Вопрос №10
 
 Итератор (iterator) - это объект, который возвращает свои элементы по одному за раз. С точки зрения Python - это любой объект, у которого есть метод __next__. 
 Этот метод возвращает следующий элемент, если он есть, или возвращает исключение StopIteration, когда элементы закончились. Кроме того, итератор запоминает, на каком объекте он остановился в последнюю итерацию.
 В Python у каждого итератора присутствует метод __iter__ - то есть, любой итератор является итерируемым объектом. Этот метод просто возвращает сам итератор.


 Вопрос №11 

  Словом «генератор» обычно обозначается функция-генератор (или метод-генератор), возвращающая итератор генератора. Однако иногда слово может быть использовано и для обозначения самого итератора.
 В случаях, когда контекст непонятен лучше использовать полные термины: функция-генератор и итератор генератора. Итератор генератора — это объект, порождаемый функцией-генератором.
 Генераторы являются простым средством для создания итераторов. Всё, что можно сделать при помощи генераторов можно также сделать при помощи итераторов, построенных на классах. Но в случае генераторов методы __iter__() и __next__() создаются автоматически,
 также автоматически возбуждается StopIteration, да и поддерживать генераторы проще и удобнее, чем реализовывать то же с использованием классов.


 Вопрос №12 

 Метакласс - это класс, который создаёт другие классы. В сущности, метапрограммирование создаёт или модифицирует код во время выполнения программы,
 а не во время её написания. Python предоставляет возможность управлять данным процессом, разрешая написать собственный метакласс для выполнения этой работы.


 Вопрос №13 

  Миксины — это особый вид наследования в Python (и других объектно-ориентированных языках), и он начинает набирать популярность в разработке Django / веб-приложений.
 Вы можете использовать Mixin, чтобы позволить классам в Python совместно использовать методы между любым классом, который наследуется от этого Mixin.


 Вопрос №14
 
 Класс — тип, описывающий устройство объектов. Объект — это экземпляр класса. Класс можно сравнить с чертежом, по которому создаются объекты.
 Python соответствует принципам объектно-ориентированного программирования. В python всё является объектами - и строки, и списки, и словари, и всё остальное.


 Вопрос №15

 Первый- это синтаксис компановки словаря. Второе -Генераторное выражение — это выражения, возвращающие итератор генератора.
 Некоторые простые генераторы могут быть записаны в виде генераторных выражений, то есть, с использованием синтаксиса, похожего на синтаксис компановки словаря, но не в кавадратных а в круглых скобках.