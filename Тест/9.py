# Наследование и композиция являются двумя основными понятиями в объектно-ориентированном программировании,
# которые моделируют отношения между двумя классами. 
# Они определяют дизайн приложения и определяют, как приложение должно развиваться 
# по мере добавления новых функций или изменения требований.
# Оба они реализуют повторное использование кода, но делают это по-разному.

# Отличия :

# Наследование — это фундаментальное понятие ООП. В языке программирования могут быть объекты и сообщения,
# но без наследования он не будет объектно-ориентированным 
# (только основанным на объектах, но все еще полиморфным).

# Композиция — это тоже фундаментальное свойство, причем любого языка.
# Даже если язык не поддерживает композицию (что редкость в наши дни),
# люди все равно будут мыслить категориями частей и компонентов.
# Без композиции было бы невозможно решить сложные задачи по частям.
# (Инкапсуляция тоже вещь фундаментальная, но сейчас речь не о ней)

# Пример:

class WinDoor:
    def __init__(self, x, y):
        self.square = x * y

class Room:
    def __init__(self, x, y, z):
        self.square = 2 * z * (x + y)
        self.wd = []
    def addWD(self, w, h):
        self.wd.append(WinDoor(w, h))
    def workSurface(self):
        new_square = self.square
        for i in self.wd:
            new_square -= i.square
        return new_square
 
r1 = Room(6, 3, 2.7) 
print(r1.square) # выведет 48.6
r1.addWD(1, 1) 
r1.addWD(1, 1)
r1.addWD(1, 2)
print(r1.workSurface()) # выведет 44.6