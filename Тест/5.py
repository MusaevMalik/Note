# Вопрос №5 
# Под наследованием понимается возможность создания нового класса на базе существующего.
#  Наследование предполагает наличие отношения “является” между классом наследником и классом родителем.
#  При этом класс потомок будет содержать те же атрибуты и методы, что и базовый класс,
#  но при этом его можно (и нужно) расширять через добавление новых методов и атрибутов.
# Примером базового класса, демонстрирующего наследование,
# можно определить класс “автомобиль”, имеющий атрибуты: масса, мощность двигателя,
# объем топливного бака и методы: завести и заглушить.
# У такого класса может быть потомок – “грузовой автомобиль”, он будет содержать те же атрибуты и методы,
# что и класс “автомобиль”, и дополнительные свойства: количество осей, мощность компрессора и т.п..


# Пример:

class Person:
    def __init__(self, name, age):
        self.__name = name  # устанавливаем имя
        self.__age = age  # устанавливаем возраст
 
    @property
    def age(self):
        return self.__age
 
    @age.setter
    def age(self, age):
        if age in range(1, 100):
            self.__age = age
        else:
            print("Недопустимый возраст")
 
    @property
    def name(self):
        return self.__name
 
    def display_info(self):
        print("Имя:", self.__name, "\tВозраст:", self.__age)
 
 
class Employee(Person):
 
    def details(self, company):
        # print(self.__name, "работает в компании", company) # так нельзя, self.__name - приватный атрибут
        print(self.name, "работает в компании", company)
 
 
tom = Employee("Tom", 23)
tom.details("Google")
tom.age = 33
tom.display_info()